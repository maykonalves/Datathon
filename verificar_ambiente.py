#!/usr/bin/env python3
"""
Script de verifica√ß√£o do ambiente para o projeto Decision
"""

def verificar_ambiente():
    print("üîç Verificando ambiente do projeto Decision...\n")
    
    # Verificar Python
    import sys
    print(f"‚úÖ Python: {sys.version}")
    
    # Verificar depend√™ncias principais
    try:
        import streamlit as st
        print(f"‚úÖ Streamlit: {st.__version__}")
    except ImportError:
        print("‚ùå Streamlit n√£o encontrado")
    
    try:
        import pandas as pd
        print(f"‚úÖ Pandas: {pd.__version__}")
    except ImportError:
        print("‚ùå Pandas n√£o encontrado")
    
    try:
        import numpy as np
        print(f"‚úÖ NumPy: {np.__version__}")
    except ImportError:
        print("‚ùå NumPy n√£o encontrado")
    
    try:
        import sklearn
        print(f"‚úÖ Scikit-learn: {sklearn.__version__}")
    except ImportError:
        print("‚ùå Scikit-learn n√£o encontrado")
    
    try:
        import xgboost as xgb
        print(f"‚úÖ XGBoost: {xgb.__version__}")
    except ImportError:
        print("‚ùå XGBoost n√£o encontrado")
    
    # Verificar spaCy e modelo
    try:
        import spacy
        print(f"‚úÖ spaCy: {spacy.__version__}")
        
        try:
            nlp = spacy.load("pt_core_news_sm")
            print("‚úÖ Modelo spaCy portugu√™s carregado com sucesso")
        except OSError:
            try:
                import pt_core_news_sm
                print("‚úÖ Modelo spaCy portugu√™s dispon√≠vel via pacote")
            except ImportError:
                print("‚ö†Ô∏è Modelo spaCy portugu√™s n√£o encontrado - usando fallback")
    except ImportError:
        print("‚ùå spaCy n√£o encontrado")
    
    # Verificar NLTK
    try:
        import nltk
        print(f"‚úÖ NLTK: {nltk.__version__}")
        
        try:
            from nltk.corpus import stopwords
            stopwords.words('portuguese')
            print("‚úÖ Stopwords em portugu√™s dispon√≠veis")
        except:
            print("‚ö†Ô∏è Stopwords em portugu√™s n√£o encontradas")
    except ImportError:
        print("‚ùå NLTK n√£o encontrado")
    
    # Verificar modelos
    import os
    modelos_path = "models"
    if os.path.exists(modelos_path):
        modelos = [f for f in os.listdir(modelos_path) if f.endswith('.pkl')]
        if modelos:
            print(f"‚úÖ Modelos encontrados: {len(modelos)}")
            for modelo in modelos:
                print(f"   - {modelo}")
        else:
            print("‚ö†Ô∏è Nenhum modelo .pkl encontrado na pasta models/")
    else:
        print("‚ùå Pasta models/ n√£o encontrada")
    
    # Verificar dados
    dados_path = "data/raw"
    if os.path.exists(dados_path):
        dados = os.listdir(dados_path)
        if dados:
            print(f"‚úÖ Dados encontrados: {len(dados)} arquivo(s)")
        else:
            print("‚ö†Ô∏è Pasta data/raw/ vazia")
    else:
        print("‚ùå Pasta data/raw/ n√£o encontrada")
    
    print("\nüéâ Verifica√ß√£o conclu√≠da!")

if __name__ == "__main__":
    verificar_ambiente()
